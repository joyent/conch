---
openapi: "3.0.0"
info:
  version: 2.0.0
  title: Conch API Service
servers:
  - url: https://preflight.scloud.zone
security:
  integratorCookie: []
paths:
  /login:
    post:
      summary: Create a login session
      security: []
      operationId: login
      requestBody:
        content:
          required: true
          application/json:
            schema:
              properties:
                user:
                  type: string
                password:
                  type: string
              required:
                - user
                - password
      responses:
        '200':
          description: User successfully authenticated
        '401':
          description: User failed to authenticate
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    post:
      summary: Create an integrator user
      security:
        - adminCookie: []
      operationId: createIntegrator
      requestBody:
        content:
          required: true
          application/json:
            schema:
              properties:
                user:
                  type: string
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                properties:
                  user:
                    type: string
                  password:
                    description: Randomly generated password
                    type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/me/settings:
    get:
      tags: [setting]
      summary: Get all settings for current user
      operationId: getUserSettings
      parameter:
        - in: query
          name: keys_only
          description: If set, list only the names of the setting kyes
          schema:
            type: integer
      responses:
        '200':
          description: Current user settings
          content:
            application/json:
              examples:
                default:
                  value: { "burn_in_time": "2430", "favorite_foods": [ "peaches", "sushi" ] }
                keys_only:
                  summary: Response when keys_only is set to a non-zero integer
                  value: [ "burn_in_time", "favorite_foods" ]
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [setting]
      summary: Update or add multiple user settings
      operationId: setUserSettings
      requestBody:
        content:
          required: true
          application/json:
            example: { "favorite_foods": [ "avocados", "peaches"], "nested": { "structure": 1 } }
      responses:
        '200':
          description: Set user settings successfully
          content:
            application/json:
              example: { "status": "updated settings for user" }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/me/settings/{key}:
    get:
      tags: [ setting ]
      summary: Get specified setting for current user
      operationId: getUserSetting
      responses:
        '200':
          description: Value for specified setting
          content:
            application/json:
              example: { "burn_in_time": "2430" }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags: [ setting ]
      summary: Update or add specified user setting
      operationId: setUserSetting
      requestBody:
        content:
          required: true
          description: The setting key in the JSON object must match the one in the path
          application/json:
            example: { "burn_in_time": "6540" }
      responses:
        '200':
          description: Set user setting successfully
          content:
            application/json:
              example: { "status": "updated setting 'burn_in_time' for user" }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags: [ setting ]
      summary: Remove specified user setting
      operationId: removeUserSetting
      responses:
        '200':
          description: Set user setting successfully
          content:
            application/json:
              example: { "status": "deleted settings 'burn_in_time' for user" }
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /datacenter_access:
    put:
      summary: Idempotently associate a user account with datacenter rooms
      security:
        - adminCookie: []
      requestBody:
        content:
          required: true
          description: >
              Payload should be a map between user names and a list of
              datacenter room namess. To remove all access from a user, assign
              the user name to a non-existant datacenter room (like
              `__NO_ACCESS__'). This is a known bug.
          application/json:
            example: { "integrator_user_name": [ "datacenter_az_1", "datacenter_az_2"}
      responses:
        '200':
          description: Associated user(s) and datacenter rooms successfully
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /relay:
    get:
      summary: List all relay devices a user has used
      operationId: getRelays
      responses:
        '200':
          description: List of relay objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Relay"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /relay/{serial}/register:
    post:
      summary: Register a relay device
      operationId: registerRelay
      requestBody:
        content:
          required: true
          application/json:
            schema:
                properties:
                  version:
                    type: string
                  ssh_port:
                    type: integer
      responses:
        '200':
          description: Successfully registered relay
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /device:
    get:
      summary: List all devices for the user
      operationId: getDevices
  /device/active:
    get:
      summary: List all device active in the last 2 minutes
      operationId: getActiveDevices
  /device/health/FAIL:
    get:
      summary: List all devices failing validation
      operationId: getFailingDevices
  /device/health/PASS:
    get:
      summary: List all devices passing validation
      operationId: getPassingDevices
  /device/{serial}:
    get:
      summary: Get most recent device report
      operationId: getDeviceReport
    post:
      summary: Submit a device report for validation
      operationId: sendDeviceReport
  /device/{serial}/location:
    post:
      summary: Update the device rack location
      operationId: setDeviceLocation
    delete:
      summary: Delete the device rack location
      operationId: deleteDeviceLocation
  /device/{serial}/settings:
    summary: Settings are key-values that are set per-device. Keys are strings and values are JSON
    get:
      summary: Retrieve all settings for a device
      operationId: getDeviceSettings
    post:
      summary: Update or add multiple settings for a device
      operationId: setDeviceSettings
  /device/{serial}/settings/{key}:
    get:
      summary: Retrieve specified setting for a device
      operationId: getDeviceSetting
    post:
      summary: Update or add specified setting for a device
      operationId: setDeviceSetting
    delete:
      summary: Delete specified setting for a device
      operationId: removeDeviceSetting

  /rack:
    get:
      summary: List all available racks
      operationId: getRacks
  /rack/:uuid:
    get:
      summary: Get layout for a specific rack
      operationId: getRack
  /rack/:uuid/layout:
    post:
      summary: Update multiple slots in a given rack
      operationId: getRackLayout
  /problem:
    get:
      summary: Describe all components failing validation
      operationId: getProblems
tags:
  - name: setting
    description: >
      Settings are unstructured, key-value pairs. The key of a setting must be
      a string. The value can be any valid JSON value (object, array, string,
      number, or boolean).
components:
  schemas:
    Error:
      properties:
        error:
          type: object
    Relay:
      properties:
        alias:
          type: string
        created:
          type: string
          format: date-time
        devices:
          description: >
            Array of devices that have reported through this relay device
          type: array
        id:
          type: string
        ipaddr:
          type: string
        ssh_port:
          type: string
        updated:
          type: string
          format: date-time
        version:
          type: string
  securitySchemes:
        created:
          type: string
    integratorCookie:
      type: apiKey
      name: dancer.session
      in: cookie
    adminCookie:
      type: apiKey
      name: dancer.session
      in: cookie

