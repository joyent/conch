=head1 NAME

Conch::Plugin::JsonValidator

=head1 SYNOPSIS

	app->plugin('Conch::Plugin::JsonValidator');

	[ ... in a controller ]

	sub endpoint ($c) {
		my $body = $c->validate_input("MyInputDefinition");

		[ ... ]

		$c->status_with_validation(200, MyOutputDefinition => $ret);
	}


=head1 DESCRIPTION

Conch::Plugin::JsonValidator provides an optional manner to validate input and
output from a Mojo controller against JSON Schema.

The C<validate_input> helper uses the provided schema definition to validate
B<JUST> the incoming JSON request. Headers and query parameters B<ARE NOT>
validated. If the data fails validation, a 400 status is returned to user
with an error payload containing the validation errors.

The C<status_with_validation> helper validates the outgoing data against the
provided schema definition. If the data validates, C<status> is called, using
the provided status code and data. If the data validation fails, a
C<Mojo::Exception> is thrown, returning a 500 to the user.

=head1 SCHEMAS

C<validate_input> validates data against the C<json-schema/input.yaml> file.

=head1 METHODS

=cut

package Conch::Plugin::JsonValidator;

use Mojo::Base 'Mojolicious::Plugin', -signatures;

use JSON::Validator;

use constant OUTPUT_SCHEMA_FILE => "json-schema/response.yaml";
use constant INPUT_SCHEMA_FILE => "json-schema/input.yaml";

=head2 register

Load the plugin into Mojo. Called by Mojo directly

=cut

sub register ( $self, $app, $conf ) {

	my $v = JSON::Validator->new();
	$v->schema(INPUT_SCHEMA_FILE);
	# coerce values because JSON generated by Perl is loose with the types
	$v->coerce(1);

	$app->helper(validate_input => sub ($c, $schema) {
		my $j = $c->req->json;
		my $s = $schema;

		unless(ref $schema eq 'HASH') {
			$s = $v->get("/definitions/$schema");
		}

		unless ($s) {
			Mojo::Exception->throw("unable to locate schema $schema");
			return undef;
		}
		my @errors = $v->validate(
			$j,
			$s,
		);
		if (@errors) {
			$c->log->error("FAILED data validation for schema $schema: ".join(" // ", @errors));
			$c->status(400 => { error => join("\n",@errors) });
			return undef;
		} else {
			$c->log->debug("Passed data validation for schema $schema");
			return $j;
		}
	});
}

1;
__END__

=pod

=head1 LICENSING

Copyright Joyent, Inc.

This Source Code Form is subject to the terms of the Mozilla Public License,
v.2.0. If a copy of the MPL was not distributed with this file, You can obtain
one at http://mozilla.org/MPL/2.0/.

=cut
